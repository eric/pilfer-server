{
  "profile": {
    "version": "0.2.5",
    "timestamp": 1363430365,
    "files": {
      "lib/bundler_api/web.rb": {
        "total": 763708,
        "child": 758832,
        "exclusive": 534,
        "total_cpu": 23544,
        "child_cpu": 19607,
        "exclusive_cpu": 504,
        "lines": {
          "40": {
            "wall_time": 40,
            "cpu_time": 35,
            "calls": 6
          },
          "41": {
            "wall_time": 35,
            "cpu_time": 31,
            "calls": 6
          },
          "45": {
            "wall_time": 391,
            "cpu_time": 383,
            "calls": 2
          },
          "46": {
            "wall_time": 758932,
            "cpu_time": 19692,
            "calls": 2
          },
          "47": {
            "wall_time": 577,
            "cpu_time": 463,
            "calls": 3
          },
          "48": {
            "wall_time": 411,
            "cpu_time": 344,
            "calls": 2
          },
          "51": {
            "wall_time": 426,
            "cpu_time": 334,
            "calls": 1
          },
          "85": {
            "wall_time": 76,
            "cpu_time": 71,
            "calls": 1
          },
          "86": {
            "wall_time": 763632,
            "cpu_time": 23473,
            "calls": 2
          },
          "87": {
            "wall_time": 762877,
            "cpu_time": 22775,
            "calls": 484
          }
        }
      },
      "lib/bundler_api/dep_calc.rb": {
        "total": 758832,
        "child": 0,
        "exclusive": 758832,
        "total_cpu": 19607,
        "child_cpu": 0,
        "exclusive_cpu": 19607,
        "lines": {
          "8": {
            "wall_time": 173,
            "cpu_time": 169,
            "calls": 2
          },
          "24": {
            "wall_time": 758007,
            "cpu_time": 18978,
            "calls": 1
          },
          "25": {
            "wall_time": 618,
            "cpu_time": 421,
            "calls": 174
          },
          "26": {
            "wall_time": 2690,
            "cpu_time": 1978,
            "calls": 613
          },
          "30": {
            "wall_time": 652,
            "cpu_time": 460,
            "calls": 2
          },
          "32": {
            "wall_time": 80,
            "cpu_time": 41,
            "calls": 48
          },
          "33": {
            "wall_time": 61,
            "cpu_time": 37,
            "calls": 48
          },
          "34": {
            "wall_time": 65,
            "cpu_time": 42,
            "calls": 48
          }
        }
      }
    }
  },
  "hostname": "52c8ede0-6f4a-479a-ad2e-d0eaaec9a3e4",
  "pid": 59078,
  "description": "GET /api/v1/dependencies",
  "file_sources": {
    "lib/bundler_api/web.rb": "require 'sinatra/base'\nrequire 'sequel'\nrequire 'json'\nrequire_relative '../bundler_api'\nrequire_relative '../bundler_api/dep_calc'\nrequire_relative '../bundler_api/metriks'\nrequire_relative '../bundler_api/honeybadger'\nrequire_relative '../bundler_api/gem_helper'\nrequire_relative '../bundler_api/update/job'\nrequire_relative '../bundler_api/update/yank_job'\n\nclass BundlerApi::Web < Sinatra::Base\n  RUBYGEMS_URL = \"https://www.rubygems.org\"\n\n  unless ENV['RACK_ENV'] == 'test'\n    use Metriks::Middleware\n    use Honeybadger::Rack\n\n    require 'pilfer'\n    use(Pilfer::Middleware, service_url:   ENV['PILFER_URL'],\n                            service_token: ENV['PILFER_TOKEN']) do\n      # TODO: Run profile only when requested.\n    end\n  end\n\n  def initialize(conn = nil, write_conn = nil)\n    @rubygems_token = ENV['RUBYGEMS_TOKEN']\n\n    @conn = conn || begin\n      Sequel.connect(ENV[\"FOLLOWER_DATABASE_URL\"])\n    end\n\n    @write_conn = write_conn || begin\n      Sequel.connect(ENV[\"DATABASE_URL\"])\n    end\n\n    super()\n  end\n\n  def gems\n    halt(200) if params[:gems].nil?\n    params[:gems].split(',')\n  end\n\n  def get_deps\n    timer = Metriks.timer('dependencies').time\n    deps  = BundlerApi::DepCalc.deps_for(@conn, gems)\n    Metriks.histogram('gems.size').update(gems.size)\n    Metriks.histogram('dependencies.size').update(deps.size)\n    deps\n  ensure\n    timer.stop if timer\n  end\n\n  def get_payload\n    params = JSON.parse(request.body.read)\n    puts \"webhook request: #{params.inspect}\"\n\n    if @rubygems_token && (params[\"rubygems_token\"] != @rubygems_token)\n      halt 403, \"You're not Rubygems\"\n    end\n\n    %w(name version platform prerelease).each do |key|\n      halt 422, \"No spec #{key} given\" if params[key].nil?\n    end\n\n    version = Gem::Version.new(params[\"version\"])\n    BundlerApi::GemHelper.new(params[\"name\"], version,\n      params[\"platform\"], params[\"prerelease\"])\n  rescue JSON::ParserError\n    halt 422, \"Invalid JSON\"\n  end\n\n  def json_payload(payload)\n    content_type 'application/json;charset=UTF-8'\n    JSON.dump(:name => payload.name, :version => payload.version.version,\n      :platform => payload.platform, :prerelease => payload.prerelease)\n  end\n\n  error do |e|\n    # Honeybadger 1.3.1 only knows how to look for rack.exception :(\n    request.env['rack.exception'] = request.env['sinatra.error']\n  end\n\n  get \"/api/v1/dependencies\" do\n    content_type 'application/octet-stream'\n    Metriks.timer('dependencies.marshal').time do\n      Marshal.dump(get_deps)\n    end\n  end\n\n  get \"/api/v1/dependencies.json\" do\n    content_type 'application/json;charset=UTF-8'\n    Metriks.timer('dependencies.jsonify').time do\n      get_deps.to_json\n    end\n  end\n\n  post \"/api/v1/add_spec.json\" do\n    Metriks.counter('gems.added').increment\n    payload = get_payload\n    job = BundlerApi::Job.new(@write_conn, payload)\n    job.run\n\n    json_payload(payload)\n  end\n\n  post \"/api/v1/remove_spec.json\" do\n    Metriks.counter('gems.removed').increment\n    payload    = get_payload\n    rubygem_id = @write_conn[:rubygems].filter(name: payload.name.to_s).select(:id).first[:id]\n    version    = @write_conn[:versions].where(\n      rubygem_id: rubygem_id,\n      number:     payload.version.version,\n      platform:   payload.platform\n    ).update(indexed: false)\n\n    json_payload(payload)\n  end\n\n  get \"/quick/Marshal.4.8/:id\" do\n    redirect \"#{RUBYGEMS_URL}/quick/Marshal.4.8/#{params[:id]}\"\n  end\n\n  get \"/fetch/actual/gem/:id\" do\n    redirect \"#{RUBYGEMS_URL}/fetch/actual/gem/#{params[:id]}\"\n  end\n\n  get \"/gems/:id\" do\n    redirect \"#{RUBYGEMS_URL}/gems/#{params[:id]}\"\n  end\n\n  get \"/specs.4.8.gz\" do\n    redirect \"#{RUBYGEMS_URL}/specs.4.8.gz\"\n  end\nend\n",
    "lib/bundler_api/dep_calc.rb": "require 'zlib'\nrequire_relative '../bundler_api'\n\nclass BundlerApi::DepCalc\n  DepKey = Struct.new(:name, :number, :platform)\n\n  # @param [String] array of strings with the gem names\n  def self.deps_for(connection, gems)\n    dataset = connection[<<-SQL, Sequel.value_list(gems)]\n      SELECT rv.name, rv.number, rv.platform, d.requirements, for_dep_name.name dep_name\n      FROM\n        (SELECT r.name, v.number, v.platform, v.id AS version_id\n        FROM rubygems AS r, versions AS v\n        WHERE v.rubygem_id = r.id\n          AND v.indexed is true\n          AND r.name IN ?) AS rv\n      LEFT JOIN dependencies AS d ON\n        d.version_id = rv.version_id\n      LEFT JOIN rubygems AS for_dep_name ON\n        d.rubygem_id = for_dep_name.id\n        AND d.scope = 'runtime';\nSQL\n\n    deps = {}\n    dataset.each do |row|\n      key = DepKey.new(row[:name], row[:number], row[:platform])\n      deps[key] = [] unless deps[key]\n      deps[key] << [row[:dep_name], row[:requirements]] if row[:dep_name]\n    end\n\n    deps.map do |dep_key, gem_deps|\n      {\n        name:         dep_key.name,\n        number:       dep_key.number,\n        platform:     dep_key.platform,\n        dependencies: gem_deps\n      }\n    end\n  end\nend\n"
  }
}
